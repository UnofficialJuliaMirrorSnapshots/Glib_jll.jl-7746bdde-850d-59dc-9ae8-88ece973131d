# Autogenerated wrapper script for Glib_jll for x86_64-apple-darwin14
export libgio, libgmodule, libgthread, libglib, libgobject

using Libffi_jll
using Gettext_jll
using PCRE_jll
using Zlib_jll
## Global variables
const PATH_list = String[]
const LIBPATH_list = String[]
PATH = ""
LIBPATH = ""
LIBPATH_env = "DYLD_FALLBACK_LIBRARY_PATH"

# Relative path to `libgio`
const libgio_splitpath = ["lib", "libgio-2.0.0.dylib"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libgio_path = ""

# libgio-specific global declaration
# This will be filled out by __init__()
libgio_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libgio = "@rpath/libgio-2.0.0.dylib"


# Relative path to `libgmodule`
const libgmodule_splitpath = ["lib", "libgmodule-2.0.0.dylib"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libgmodule_path = ""

# libgmodule-specific global declaration
# This will be filled out by __init__()
libgmodule_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libgmodule = "@rpath/libgmodule-2.0.0.dylib"


# Relative path to `libgthread`
const libgthread_splitpath = ["lib", "libgthread-2.0.0.dylib"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libgthread_path = ""

# libgthread-specific global declaration
# This will be filled out by __init__()
libgthread_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libgthread = "@rpath/libgthread-2.0.0.dylib"


# Relative path to `libglib`
const libglib_splitpath = ["lib", "libglib-2.0.0.dylib"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libglib_path = ""

# libglib-specific global declaration
# This will be filled out by __init__()
libglib_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libglib = "@rpath/libglib-2.0.0.dylib"


# Relative path to `libgobject`
const libgobject_splitpath = ["lib", "libgobject-2.0.0.dylib"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libgobject_path = ""

# libgobject-specific global declaration
# This will be filled out by __init__()
libgobject_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libgobject = "@rpath/libgobject-2.0.0.dylib"


"""
Open all libraries
"""
function __init__()
    global prefix = abspath(joinpath(@__DIR__, ".."))

    # Initialize PATH and LIBPATH environment variable listings
    global PATH_list, LIBPATH_list

    append!(PATH_list, Libffi_jll.PATH_list)
    append!(LIBPATH_list, Libffi_jll.LIBPATH_list)
    append!(PATH_list, Gettext_jll.PATH_list)
    append!(LIBPATH_list, Gettext_jll.LIBPATH_list)
    append!(PATH_list, PCRE_jll.PATH_list)
    append!(LIBPATH_list, PCRE_jll.LIBPATH_list)
    append!(PATH_list, Zlib_jll.PATH_list)
    append!(LIBPATH_list, Zlib_jll.LIBPATH_list)
    global libgio_path = abspath(joinpath(artifact"Glib", libgio_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libgio_handle = dlopen(libgio_path)
    push!(LIBPATH_list, dirname(libgio_path))

    global libgmodule_path = abspath(joinpath(artifact"Glib", libgmodule_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libgmodule_handle = dlopen(libgmodule_path)
    push!(LIBPATH_list, dirname(libgmodule_path))

    global libgthread_path = abspath(joinpath(artifact"Glib", libgthread_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libgthread_handle = dlopen(libgthread_path)
    push!(LIBPATH_list, dirname(libgthread_path))

    global libglib_path = abspath(joinpath(artifact"Glib", libglib_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libglib_handle = dlopen(libglib_path)
    push!(LIBPATH_list, dirname(libglib_path))

    global libgobject_path = abspath(joinpath(artifact"Glib", libgobject_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libgobject_handle = dlopen(libgobject_path)
    push!(LIBPATH_list, dirname(libgobject_path))

    # Filter out duplicate and empty entries in our PATH and LIBPATH entries
    filter!(!isempty, unique!(PATH_list))
    filter!(!isempty, unique!(LIBPATH_list))
    global PATH = join(PATH_list, ':')
    global LIBPATH = join(LIBPATH_list, ':')

    # Add each element of LIBPATH to our DL_LOAD_PATH (necessary on platforms
    # that don't honor our "already opened" trick)
    #for lp in LIBPATH_list
    #    push!(DL_LOAD_PATH, lp)
    #end
end  # __init__()

